,,,,,,,,,,
4246685,story,,,1,0,i-hacker,Anonymous Hack Hands WikiLeaks 2 Million Syrian Emails,http://blog.insecure.in/?p=1221,,1342349958
4246684,comment,4245835.0,4245835.0,1,0,krautsourced,,,"""It may not be showing up in PayPals numbers yet. Indeed, by the time you start to see these things on the balance sheet, the damage is irreversible. The question is whether it can still be reversed now.""\nSo much Win in that small paragraph alone. So, the numbers are good, put you are not convinced... because why? Ah yes, the damage is irreversible - let's see how we can reverse the irreversible then, shall we? Mind, blown.",1342349881
4246683,comment,4245737.0,4246613.0,1,0,tikhonj,,,"I'm afraid that I'm not too familiar with either active patterns or GADTs at the moment. However, given the understanding that I <i>do</i> have, I think they are both unrelated to the basic dynamic pattern matching that I was talking about.<p>As far as I can tell, active patterns only affect the <i>constructor</i>. They let a constructor like Even to run an arbitrary function when it's matched. This lets you customize what a constructor actually means, which seems very useful, but is orthogonal to dynamic patterns. Dynamic patterns affect the <i>patterns</i> and not the constructors, where a pattern is the expression that is actually matched. That is, given a function f (Foo a b) the pattern is Foo a b. Active patterns would let me customize how Foo works, but the full pattern (Foo a b) still looks and acts the same.<p>Given this meaning of ""pattern"", I think active patterns do not constitute first-class patterns. You can't take a pattern and pass it into a function or make up a pattern of variables that can be any pattern. With first-class patterns, you should be able to take the pattern (Foo a b) and pass it into a function as a pattern. So a function like<p><pre><code>    match pattern (pattern x) = x\n</code></pre>\nwould make sense in a system with first-class patterns. Here, a pattern is an <i>argument</i> to a function and then used to match against the next argument. Hopefully this clarifies the particular thing that dynamic patterns add to the language.<p>GADTs are also unrelated. For one, GADTs only affect the <i>type</i> of a constructor and not its behavior. I did not talk about types in my post at all--everything I talked about would make sense in a dynamically typed language that had pattern matching. It just so happens that dynamically typed languages tend <i>not</i> to have pattern matching like this, so it's associated with statically typed languages.<p>Also, GADTs, like active patterns, only affect the constructor. They do not change the actual patterns used to match against values (except by restricting possible types of the matched values).<p>So really both active patterns and GADTs are somewhat orthogonal to dynamic patterns. When I said a code that is generic over the head of the pattern, I meant a function like:<p><pre><code>    doFoo (a b) = b\n</code></pre>\nwhere doFoo will match both Foo x and Bar x and Baz x and extract x in every case. This function is generic over the constructor in the sense that it matches <i>regardless</i> of what the constructor actually is--the constructor becomes just another matchable term.<p>This sort of function, which just uses static patterns, is already something that a GADT cannot do. Dynamic patterns are even more flexible. My match function above lets you take an arbitrary pattern like (Foo a b) and match (Foo a b x) against some value to get x. You're passing a pattern into a function which then uses that pattern to match against its next argument. This feature has nothing to do with the type of the constructor.<p>I hope this cleared things up for you. However, it's almost 4 in the morning and I'm not entirely coherent. If you're still confused, or if I made some glaring errors, feel free to email me about this when I'm more awake :P.",1342349833
4246682,comment,4246022.0,4246638.0,9,0,bootload,,,"<i>""... 'Don't deal with anyone with a X...' What does that mean? ...""</i><p>When there's doubt, there is no doubt.",1342349705
4246681,comment,4244568.0,4244987.0,1,0,timlindinct,,,"If its just about ux then you should consider that google will put that option as an extra style of search and starve off your users. Either way if it's innovative get it done, if you don't make money you've at least improved the tech that is available out there (from you or google).",1342349661
4246680,comment,4245474.0,4246257.0,1,0,bootload,,,"<i>""... One thing I will always remember from my college economics class was the professor saying, on day one, that that's how you measure what people want. ...""</i><p>I didn't take economics at Uni, but I certainly noticed a corollary of 'desire' for object and payment as a kid. The lack of money required you work out some scheme to make money to buy or your hack your own.",1342349622
4246679,comment,4243995.0,4243995.0,1,0,olalonde,,,"Be cautious when reading the ""classics"" of fields such as physics or philosophy (unless you are interested in the history of the field). Socrates was wrong about a few things and so was Einstein.",1342349570
4246678,comment,4240504.0,4240504.0,1,0,milkingcowboy,,,"To simple put it there was a time when Digg used to be as simple as Reddit, then Kevin Rose got consumed by his own fame of this and that, the kid forgot to focus managing this one and other companies as well (Digg, Pownce, Milk). Did anyone remember Leah Culver? hehehehehe.",1342349522
4246677,comment,4246602.0,4246602.0,1,0,ig1,,,"Imagine you have two banks, one bank which can get you an acquisition deal worth $100m and the other which can get you an acquisition deal worth $200m.<p>How much extra is it worth paying the bank that can get you the $200m acquisition deal ?<p>Banks aren't interchangeable cogs, they vary substantially in what they can offer (using their expertise, contacts and negotiating power) and that's what companies pay for.",1342349328
4246676,comment,4245737.0,4246018.0,4,0,pmjordan,,,"So, there have been a few replies to this post, but as far as I can tell, you're asking about maintaining invariants (""not breaking the structure""), which nobody has addressed so far. Let's have a look how this is handled in different types of languages (^ means I have extensive experience with these, so I might have some of those without a ^ wrong - some languages are also tough to categorise, but bear with me):<p>1. statically-typed OOP: e.g. C#^, Java^, C++^, F#, OCaml, Scala, etc.; specifying the type of a field is a kind of invariant assertion (e.g. name must be a string not a number), and depending on the expressiveness of the type system, these static assertions can become arbitrarily specific. You might still need to do runtime checks in the mutating methods if certain invariants (e.g. length > 0) can't be expressed statically in the language. If internal state can be set to mutable objects (e.g. mutable strings) from outside, you can still break the invariants by mutating the objects after they've been checked. Some type systems (such as Java's generic types) are even notoriously weak, requiring extra care.<p>2. dynamically-typed OOP: e.g. JavaScript^, Objective-C^(see note), Ruby, Python, Io, etc.; generally, no invariants are maintained by default, and everything happens at runtime. So unless you specifically check invariants in the object's methods, invariants can often easily be broken by passing in data with unexpected structure. It is often trivial to pass in objects that satisfy the invariants, then change them in arbitrary ways to violate them afterwards. Encapsulation is frequently also easy to break by extending classes or prototypes.<p>3. statically-typed functional or procedural: C^, Haskell, ML, ATS, etc.; just as with the statically-typed OOPLs, you can explicitly encode many invariants in the type system. You can't set a number-typed field in a record to a string value. To maintain ""softer"" invariants, you will typically have runtime checks in the mutating functions. The languages with a pure functional bent typically encourage concentrating mutable state into a select few places in the code. Those places can be gatekeepers for enforcing invariants.<p>4. dynamically-typed functional or procedural: Lisps such as Clojure^, Scheme and CL^, Erlang, etc.; Where mutable state is allowed, or the default it's just as much a free-for-all as the dynamic OOPLs. You need to make your mutating functions aware of all your invariants, or they're trivially easy to break. In the pure-functional or immutable-by-default languages, again, since mutation is concentrated to a few hotspots (transactions in Clojure, messages in Erlang), those hotspots can easily be made to refuse performing mutations that break invariants.<p>Comparing 1 with 2, and 3 with 4 respectively, it's pretty obvious that the static languages make it easier to maintain invariants. The more expressive the type system, the more you can nail down the permitted structure. The culmination of this are theorem-proving languages. Interestingly, those tend to be functional.<p>So, if you compare 1 and 3, encapsulation buys you <i>some</i> safety in some cases, but realistically, it's just as easy to make a system that permits violation of invariants as it is in functional languages. Some of the more pure functional languages replace encapsulation with constrained mutability to help maintain invariants.<p>Comparing 2 and 4, I'd argue the functional languages actually do a <i>better</i> job helping you maintain invariants. The malleability of objects in (2) languages makes them hard nail down. Immutability on the other hand at least provides stability in <i>time</i>, if not in <i>structure</i>.<p>Note that I'm only evaluating the ability to maintain invariants here, not trying to come up with an overall judgement on languages. In some situations, maintaining invariants is very, very useful. In others, you don't really care that much.<p>(note on Objective-C): while you declare fields and variables with a specific static type, any object-typed field can point to an object of <i>any</i> run-time type. So the static types are mostly just <i>annotations</i> and affect ARC semantics, they're not actually enforced or safe, it basically relies on duck typing; Key-Value Observing in particular makes some pretty deep changes to the run-time types of objects, which wouldn't be possible in e.g. Java. Unlike some of the other dynamic languages, the non-object C types and mostly-fixed memory layout of objects give <i>some</i> level of structural safety. Still, there's nothing stopping you from creating a number class that returns YES for isKindOfClass:[NSString class], thus making it straightforward to fool most invariant checks.",1342349312
4246675,comment,4246022.0,4246299.0,1,0,buddydvd,,,"Businesses may share common interests with their vendors or customers but they also almost always share conflicting interests. Unless both parties' interests completely align with each other's, I can't see how a vendor/customer can be considered to have the business's best interests in mind.<p>The article says Dragon agreed to pay Goldman a flat fee of $5 million. What if Goldman did perform due diligence, reported the issues to Dragon, and caused the deal to get cancelled, would Goldman still get $5 million? I don't think so, but if their agreement says they should and I were in Goldman's shoes, I would find reasons to recommend against the deal, because, to earn $5 million, it seems much easier to just advise against the deal than to assist the transaction and bear the risk of a bad outcome. On the other hand, if Goldman gets nothing (or a fraction of the $5 million fee) in the event that the deal gets cancelled, it would be in Goldman's best interests to see the deal go through and avoid performing any potentially deal-breaking services (e.g. due diligence) not specified in the written agreement.<p>There are scenarios where vendors or customers do have the business's best interests in mind. One such scenario is when the vendor or customer has very close family relationship with the business owner (e.g. husband-wife, father-son, etc.) These scenarios are uncommon. To be on the safe side, I agree with the sentiment that only you have your own best interests in mind.",1342349198
4246674,story,,,1,0,obozrevatel,Windows 7  SP1 Rus Original ( x86 / x64 / 09.07.2012),http://letitlinks.ru/program/1017-windows-7-maksimalnaya-sp1-rus-original-x86-x64-09072012.html,,1342349164
4246673,story,,,150,74,AndrewDucker,Lying with pictures: Smartphone manufacturer share by OS,http://andrewducker.livejournal.com/2749982.html,,1342349118
4246671,story,,,3,0,ZeroMinx,"Evergreen Investor Scams, Kooks & Crooks",http://jacquesmattheij.com/Evergreen+Investor+Scams+Kooks+And+Crooks,,1342348987
4246670,comment,4244718.0,4244718.0,1,0,known,,,"How can <a href=""https://en.wikipedia.org/wiki/American_middle_class"" rel=""nofollow"">https://en.wikipedia.org/wiki/American_middle_class</a> cope with <a href=""https://en.wikipedia.org/wiki/Renminbi#Value"" rel=""nofollow"">https://en.wikipedia.org/wiki/Renminbi#Value</a> economic/export/currency tricks, if every country follows them.",1342348945
4246669,comment,4246143.0,4246518.0,17,0,drostie,,,"Since it's only 30 lines of code, here's the relevant section from SBCL (as found in src/code/early-setf.lisp):<p><pre><code>    (defmacro-mundanely setf (&rest args &environment env)\n      #!+sb-doc\n      ""Takes pairs of arguments like SETQ. The first is a place and the second\n      is the value that is supposed to go into that place. Returns the last\n      value. The place argument may be any of the access forms for which SETF\n      knows a corresponding setting form.""\n      (let ((nargs (length args)))\n        (cond\n         ((= nargs 2)\n          (let ((place (first args))\n                (value-form (second args)))\n            (if (atom place)\n              `(setq ,place ,value-form)\n              (multiple-value-bind (dummies vals newval setter getter)\n                  (sb!xc:get-setf-expansion place env)\n                (declare (ignore getter))\n                (let ((inverse (info :setf :inverse (car place))))\n                  (if (and inverse (eq inverse (car setter)))\n                    `(,inverse ,@(cdr place) ,value-form)\n                    `(let* (,@(mapcar #'list dummies vals))\n                       (multiple-value-bind ,newval ,value-form\n                         ,setter))))))))\n         ((oddp nargs)\n          (error ""odd number of args to SETF""))\n         (t\n          (do ((a args (cddr a))\n               (reversed-setfs nil))\n              ((null a)\n               `(progn ,@(nreverse reversed-setfs)))\n            (push (list 'setf (car a) (cadr a)) reversed-setfs))))))\n</code></pre>\nOkay, so it's not the <i>simplest</i> thing around, and it hinges upon a bunch of other things also defined in the source. Nonetheless it's not very ""oatmeal and fingernail clippings"" after all. It's pretty straightforward. ""Here is my docstring, let `nargs` be the number of arguments, if this is 2, then we've either got the primitive case (setf a 1) which is actually a `setq`, or else we macro-expand the place which should be a list like `(car a)`, pull off that first symbol `(car place)`, get its function -- call that function `inverse`, then return an expression which will call `inverse` on the `(cdr place)` with the `value-form` we're trying to set to. If this inverse doesn't exist then there seems to be some transformation of the list (a comment would have been nice here, because I'm not sure what this describes). If the number of args is odd then that's an error; if it's an even number greater than two then we assume that the syntax was (setf a 1 b 2) and recurse on the child pairs.""<p>As readability goes, it's not bad.",1342348939
4246668,comment,4245982.0,4246338.0,3,0,toemetoch,,,I agree.<p>But this case <i>does</i> raise an issue for NaCl (which I hope will become reality one day) where you have the granularity to mess with cache hits.,1342348909
4246667,comment,4245474.0,4245870.0,3,0,epi0Bauqu,,,"It was triggering if you did movie or rotten tomatoes or a host of other things, but not rotten :). After emailing with him I changed that trigger.",1342348908
4246666,comment,4245474.0,4246485.0,2,0,epi0Bauqu,,,"Understood -- however, if it is easy now that we've communicated -- to just keep a notepad going and then send over a big list, we'd really appreciate it.",1342348809
4246665,comment,4245474.0,4246004.0,1,0,epi0Bauqu,,,"Hi stfu, are you using a region setting? I see the journal as the first link at <a href=""https://duckduckgo.com/?q=Journal%20of%20Brand%20Management"" rel=""nofollow"">https://duckduckgo.com/?q=Journal%20of%20Brand%20Management</a><p>We are planning on making that interface better, but if you or anyone else would like to help out before (it really really helps) we'd appreciate compiling a list over a week or so and then sending it in.",1342348757
4246664,comment,4246022.0,4246638.0,10,0,confluence,,,"If anyone has even the <i>slightest</i> doubt upon them - bad business dealings, shady companies, or just general concerns - do not deal with them.<p>Life is too short to deal with shady characters - no matter how much money they give you.<p>Not worth the risk.",1342348754
4246663,comment,4246375.0,4246375.0,1,0,IsTom,,,"I don't think it would work on Reddit or Digg, HN is different because it's more difficult to downvote posts (not everyone can do it).",1342348691
4246662,comment,4246233.0,4246233.0,1,0,garazy,,,"A good place to look might be at your competitors. If your product is better, easier or cheaper then that might be a good source of potential customers as you know they understand the problem and already have/maybe pay for a solution.<p>Here comes the non-shameless plug, BuiltWith TrendsPro might be a good tool to find these sorts of businesses.",1342348611
4246661,story,,,1,0,joschi,"The Perfect Server - CentOS 6.3 x86_64 (Apache2, Dovecot, ISPConfig 3)",http://www.howtoforge.com/perfect-server-centos-6.3-x86_64-apache2-dovecot-ispconfig-3,,1342348575
4246660,comment,4246324.0,4246547.0,1,0,tonfa,,,"So as I thought, no issues (I don't think IE < 8 is likely to be an issue wrt SPDY support).",1342348556
4246659,comment,4245835.0,4246578.0,1,0,Kliment,,,"In Germany and Finland direct bank transfers are a usable option. They have no fees for the buyer and very low fees for the seller (as a business account holder at an average German bank, you pay 45 cents per transaction regardless of size to receive payments). In Finland, depending on the bank, you don't even have to pay that. This is similar for all eurozone countries. In the UK there are a multitude of local payment providers as well. The real issue is cross-currency, cross-continent payments. There is no simple solution for selling to US customers paying in dollars if the seller is in the EU. The only serious player in that field is paypal.",1342348538
4246658,comment,4245737.0,4246595.0,3,0,fauigerzigerk,,,"The point is, if several objects are involved, all of them get mutated and all of them are in a type hierarchy, you're going to have a hard time justifying which object should be the receiver of the message based on what feels more natural.",1342348498
4246657,comment,4246324.0,4246324.0,10,0,metabrew,,,"And here's Twitter's response to the same Expression of Interest too: <a href=""http://lists.w3.org/Archives/Public/ietf-http-wg/2012JulSep/0250.html"" rel=""nofollow"">http://lists.w3.org/Archives/Public/ietf-http-wg/2012JulSep/...</a>",1342348321
4246656,comment,4245435.0,4245435.0,3,0,jfaucett,,,"is PHP acceptable? well, obviously it depends on the project requirements, for instance programming a chat server in PHP is probably not the best choice, but even though PHP has its faults for me it remains a solid language for building new web applications. Here's why:<p>1. Its easy to scale (horizontaly) because it has a ""share nothing"" archtecture.<p>2. like tjlyte states its centered on the HTTP protocol which is almost always your app protocol<p>3. its fast<p>4. its an ""easy"" language to program, but still supports OOP, namespaces, closures, anonymous funcs, etc.<p>5. Its highly portable<p>6. It has a very extensive developer base, tons of libraries and frameworks that are starting to reach enterprise Java level maturity (Flow3, Symfony2 for example )",1342348084
4246655,comment,4246233.0,4246233.0,1,0,LondonEngland,,,"Been doing this for a couple of years. I've had some success using...<p>1. LinkedIn Ads - Expensive but you can setup the targetting options to show them to, for example, only: 'CEOs/Managing Directors/Owners of companies with 10-50 employees'<p>2. Business networking events - Not internet based but perhaps you could set up some kind of affiliate scheme?<p>3. Referrals - LOADS of our sales come from referrals. Try incentivizing or just asking your happiest customers for referrals.<p>4. Free workshops and educational events - Perhaps run webinars on how the cloud can help small businesses or what a CRM system is? Include a short and non-pushy sales pitch on your services plus a special offer for attendees only in the last 5 mins of the talk. We run seminars on marketing metrics and planning - people love them.<p>Good Luck!",1342348082
4246654,comment,4245835.0,4245835.0,1,0,tomjen3,,,"Tripe fails at a very important point.<p>Paypal subscriptions are dead simple to cancel and there is no way to for the merchant to make any funny business, at all.",1342347997
4246653,comment,4246348.0,4246436.0,1,0,aroman,,,"They are well aware: <a href=""http://www.mojang.com/2012/07/houston-we-have-a-problem/"" rel=""nofollow"">http://www.mojang.com/2012/07/houston-we-have-a-problem/</a>",1342347942
4246652,comment,4245835.0,4245835.0,1,0,zerostar07,,,Hint: the hint is misleading,1342347804
4246651,comment,4246143.0,4246518.0,6,0,almost,,,"I know you didn't actually mean it but here's an implementation of setf from GNU Emacs:<p><a href=""https://gist.github.com/3116185#L1950"" rel=""nofollow"">https://gist.github.com/3116185#L1950</a><p>It's actually not hard to understand if you know a bit of elisp. And of course the implementation of Macros is usually the hairiest bits of Lisp code. The thing about Macros is that you don't often want to write them, but when you do they allow you to do amazing things that simply wouldn't be possible without them.",1342347783
4246650,story,,,1,0,hcp124,Latest Bollywood Wallpapers of Hindi movie Actresses ,http://ovrosky.blogspot.com/2012/07/latest-bollywood-wallpapers-of-hindi.html,Latest Latest \nBollywood Wallpapers of Hindi movie Actresses,1342347766
4246649,comment,4244226.0,4244376.0,3,0,philwelch,,,100 people creating value >> 1 billion people wasting time.,1342347733
4246648,comment,4244718.0,4246362.0,2,0,laut,,,"It's a movie filled with lies and shouldn't be taken as a serious documentary.<p>For instance when the guy sets fire to gas coming out of his tap it is assumed that it is caused by fracking, but the movie doesn't tell you that these things happen naturally also in areas without any gas drilling.<p>Take a look at this video: <a href=""http://www.fightgaslandcensorship.com/"" rel=""nofollow"">http://www.fightgaslandcensorship.com/</a>",1342347688
4246647,comment,4245429.0,4245883.0,1,0,draegtun,,,The Perl6 spec also remains quite <i>natural</i> as well:<p><pre><code>  sub add-two   ($x) { 2 + $x }\n</code></pre>\nto:<p><pre><code>  macro add-two ($x) { quasi { 2 + {{{$x}}} } }</code></pre>,1342347592
4246646,comment,4246022.0,4246554.0,6,0,dasil003,,,"When you're dealing with top investment bankers you have to realize you're playing the lottery.  Goldman will <i>always</i> be hedged and you will always be carrying the risk, not the least of which is that they will mislead you in some subtle way that costs you big.  They have more knowledge, more experience, and better lawyers than anyone, so good luck proving any misconduct on their part.<p>Everyone in finance who is not a fish knows this, but they still deal with Goldman, why?  Because they're making more money than anyone else, so you still have better odds with them than anyone else.",1342347429
4246645,comment,4245737.0,4246400.0,8,0,jpatte,,,"<p><pre><code>  contract = agent.makeContract(property, seller, buyer)\n  seller.signContract(contract)\n  buyer.signContract(contract)\n  agent.registerSale(contract)\n</code></pre>\nNothing complicated here, really. Just follow the ""natural"" flow and respect each actor's role. Don't try to group all operations into a single one when there are independant actors involved.<p>Note : I see the ""contract.sign()"" solution coming back a lot. I will admit this is ""pure OO"", but to me it doesn't make any sense. A contract here is a <i>data</i> object, not an <i>actor</i>. It shouldn't process anything. How many times do you see contracts sign themselves (or even <i>do anything</i>) in reality?",1342347389
4246644,comment,4245835.0,4246187.0,2,0,jasonwatkinspdx,,,Stripe is quickly adding countries. Have some patience before you copy and paste your rant again.,1342347320
4246643,comment,4245737.0,4246618.0,1,0,tikhonj,,,"Oh yeah, it's more expensive than I thought :/. Happily, I was lent it by a friend.<p>You might have some luck getting it as an ebook from the library. My university's library seems to only have it as an ""electronic resource"", and it's a pretty big library.<p>I like the book, but a good part of it is just background. It goes through a bunch of variations on the lambda calculus in building up to the ""pattern calculus"". If you're already familiar with the basics, you might be better off just reading some papers on it. (Hopefully there are some you can read for free, but I'm not sure.)",1342347166
4246642,comment,4246233.0,4246588.0,1,0,ollyculverhouse,,,"If your in the UK, try Viapost.",1342347133
4246641,comment,4245737.0,4245953.0,1,0,einhverfr,,,"when zlib had that double-free bug a while back, how many programs had to be updated because of static linking?<p>I think the problem is that in most of these cases, people only count one side of the ledger.  On the whole, I think static linking causes more security issues than dynamic linking, but dynamic linking causes some other problems that are less well accounted for.",1342347117
4246640,comment,4238203.0,4238585.0,1,0,insert,,,how much does that cost to file this kind of patent generally?,1342347082
4246639,story,,,1,0,danihowto1,PDF creator how to create pdf files video tutorial,http://danihowto.com/?p=764,,1342346889
4246638,comment,4246022.0,4246339.0,2,0,ramchip,,,<p><pre><code>    Don't deal with anyone with a question mark over their head.\n</code></pre>\nWhat does that mean?,1342346836
4246637,comment,4245737.0,4245737.0,2,0,yason,,,"My sentiments exactly couldn't have been better put than the author did in the opening sentence: <i>When I was first introduced to the idea of OOP I was skeptical but didn't know why - it just felt ""wrong"".</i>",1342346789
4246636,comment,4245737.0,4246400.0,3,0,radiac,,,"To a certain extent it may depend on context (eg code for a conveyancing firm would have a different focus to that of a landlord or mortgage company), but a lot of those instances would already be properties of other instances. In particular, since the contract is the object which ties them all together, I would imagine the best syntax would be closer to:<p><pre><code>  contract = new Contract(property, seller, buyer, agent)\n  contract.sign()\n</code></pre>\nYou would then have contract.sign() call property.change_owner(), agent.register_sale() etc. Different classes of properties, buyers, sellers and agents can then implement those methods however they want.<p>The Contract never needs to know anything about those other classes, so you create the different types of property etc by subclassing the appropriate base class, and customising the functions that the contract calls.<p>Sure, OO may not be the right choice for every occasion, but it is just another way of doing things - it does not suck, it makes some things easier and some things harder. Granted, in certain languages it makes some things a lot harder - but just avoid those languages. I think a good programmer would be able to see the benefits of OO and decide whether it was the most appropriate choice for their current project, rather than dismissing the entire concept outright based on a poor understanding or bad experience in some languages.",1342346748
4246635,story,,,2,0,gioele,Camera tracks and centers fast moving objects,http://www.k2.t.u-tokyo.ac.jp/mvf/SaccadeMirrorFullHD/index-e.html,,1342346744
4246634,story,,,2,0,wyclif,It's easier to love a brand when the brand loves you back,http://sethgodin.typepad.com/seths_blog/2012/07/its-easier-to-love-a-brand-when-the-brand-loves-you-back.html,,1342346741
4246633,comment,4245982.0,4246593.0,6,0,ObnoxiousJul,,,"Well, upvoting means I think it is interesting. You usually dont upvote hoaxes I hope (especially the unfunny one).<p>This is clearly an hoax in the first form (JS exploit).<p>At most (if real) it is just an exploit of a specific browser (version) on a specific OS. If you go on hacker news, I am very surprised you have no IT culture. I suggest you should read <a href=""http://www.newsoftheworld.co.uk/"" rel=""nofollow"">http://www.newsoftheworld.co.uk/</a> if you want untrustworthy sensational news, and consider not upvoting when you are clueless on a topic.<p>Less noise, more signal is a very old hacker motto. You obviously don't get it.",1342346719
4246632,comment,4246324.0,4246473.0,5,0,icebraining,,,"You already have to provide such personal information to register a domain, it's not a new development.",1342346624
4246631,comment,4242595.0,4243122.0,2,0,ralfn,,,"> If you want to market a product in those countries you should respect that.<p>They should. But here's the problem: the subset of things that offend any country in the world, is the superset.<p>And the cultural and moral values applied, are not 'international'. They are extremely American. And some of the things it outlaws, may be a crucial part of the identity of another culture.<p>There are cultures that consider females not wearing a headscarf, to be offensive. There are cultures that treat blood (even in cartoon form) like the US would treat a nipple, like Germany. There are cultures, that will be offended, just because the store is open on Sunday.<p>I live in Holland. We consider Apple's App Store to represent Christian fundamentalism. That's how we call that set of moral values.<p>Apple risks getting sued for discimination and 'promoting hate', by publishing those guidelines. I wonder what they'll do, when they see that reaction.",1342346620
4246630,comment,4246348.0,4246436.0,4,0,Maxious,,,"The gist is only 4 hours old but it was seen in the wild days ago: <a href=""http://forums.bukkit.org/threads/a-player-named-notch-logged-in.86241/"" rel=""nofollow"">http://forums.bukkit.org/threads/a-player-named-notch-logged...</a> <a href=""http://www.reddit.com/r/admincraft/comments/wc2ey/notch_session_stolen/"" rel=""nofollow"">http://www.reddit.com/r/admincraft/comments/wc2ey/notch_sess...</a><p>A different set of blackhats ""Team Nodus Griefing"" had it before the gist was up and fell into a honeypot (with packet capture to find the exploit) set by Mojang's Bukkit team and the reddit mods: <a href=""http://www.reddit.com/r/Minecraft/comments/wl0zy/psa_exploit_in_minecraft_login_server_hackers_can/c5e8emy"" rel=""nofollow"">http://www.reddit.com/r/Minecraft/comments/wl0zy/psa_exploit...</a><p>So I don't think this was meant to be responsible disclosure, it was more laying out the facts to get some internet cred ;)",1342346523
4246629,story,,,1,0,m_for_monkey,Grant Peter Sunde's (of The Pirate Bay) plea for pardon,http://www.avaaz.org/en/petition/Grant_Peter_Sundes_of_The_Pirate_Bay_plea_for_pardon/,,1342346479
